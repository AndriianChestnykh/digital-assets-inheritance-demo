var assert = require('nanoassert');

var isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
var crypto;

if (isNode) {
  crypto = require('crypto');
} else {
  crypto = globalThis.crypto || globalThis.msCrypto;
}

var randombytes = (function () {
  var QUOTA = 65536;

  function browserBytes(out, n) {
    for (let i = 0; i < n; i += QUOTA) {
      crypto.getRandomValues(new Uint8Array(out.buffer, i + out.byteOffset, Math.min(n - i, QUOTA)));
    }
  }

  function nodeBytes(out, n) {
    new Uint8Array(out.buffer, out.byteOffset, n).set(crypto.randomBytes(n));
  }

  function noImpl() {
    throw new Error('No secure random number generator available');
  }

  if (crypto && crypto.getRandomValues) return browserBytes;
  if (crypto && crypto.randomBytes) return nodeBytes;

  return noImpl;
})();

Object.defineProperty(module.exports, 'randombytes', {
  value: randombytes
});

module.exports.randombytes_buf = function (out) {
  assert(out, 'out must be given');
  randombytes(out, out.byteLength);
};
